import 'dart:io';

import 'package:background_downloader/background_downloader.dart';
import 'package:dio/dio.dart';
import 'package:filesize/filesize.dart';
import 'package:flutter/material.dart';
import 'package:path/path.dart' as path;
import 'package:path_provider/path_provider.dart';
import 'package:rest_api_with_dio/model/download_manager.dart';

class ImageHomeScreen extends StatefulWidget {
  const ImageHomeScreen({Key? key}) : super(key: key);

  @override
  State<ImageHomeScreen> createState() => _ImageHomeScreenState();
}

class _ImageHomeScreenState extends State<ImageHomeScreen> {

  @override
  void initState() {
    super.initState();
    getDiractory();
  }

  TextEditingController img = TextEditingController(
      text:
          "https://freetestdata.com/wp-content/uploads/2022/02/Free_Test_Data_15MB_MP4.mp4");
  String? downloadTaskId;

  String fileURL =
      "https://freetestdata.com/wp-content/uploads/2022/02/Free_Test_Data_15MB_MP4.mp4";
  Dio dio = Dio();
  Directory? dir;
  String localFilePath = '';
  CancelToken cancelToken = CancelToken();
  final progress = ValueNotifier<double?>(0.0);
  final localNotifier = ValueNotifier<String?>(null);
  List<int> sizes = [];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(title: const Text("Images Demo"), elevation: 0.0),
        body: Padding(
          padding: const EdgeInsets.all(10.0),
          child: Column(
            children: [
              TextFormField(
                controller: img,
                decoration: const InputDecoration(
                    hintText: "Enter Image URL", border: OutlineInputBorder()),
              ),
              const SizedBox(
                height: 25,
              ),
              ValueListenableBuilder(
                valueListenable: progress,
                builder: (context, value, child) {
                  return Text(value!.toString());
                },
              ),
              ElevatedButton(
                  onPressed: () async {
                    try {
                      _download();
                    } catch (e) {
                      print(e.toString());
                    }
                  },
                  child: Center(child: Text("Download"))),
              ElevatedButton(
                  onPressed: () async {
                    try {
                      _cancel();
                    } catch (e) {
                      print(e.toString());
                    }
                  },
                  child: Center(child: Text("Cancel"))),
            ],
          ),
        ));
  }

  void getDiractory() async {
    dir = await getApplicationCacheDirectory();
  }

  checkIfFileExistsInLoacal(
      {required String fileURL, required String localFilePath}) async {
    print("Checking Local Storage For File");
    localNotifier.value = '';
    File localFile = File(localFilePath);
    String dir = path.dirname(localFilePath);
    String basename = path.basenameWithoutExtension(localFilePath);
    String extension = path.extension(localFilePath);
    String localRouteToSaveFileStr = localFilePath;
    sizes.clear();
    int sumSizes = 0;
    int fileOriginSize = 0;
    bool fullFile = false;

    Response response = await dio.head(fileURL);
    fileOriginSize = int.parse(response.headers.value('content-length')!);
    String localText = 'fileOriginSize: ${filesize(fileOriginSize)}\n\n';

    bool existsSync = localFile.existsSync();
    if (!existsSync) {
      localText += 'File "$basename$extension" does not exist \nin: "$dir"';
    } else {
      int fileLocalSize = localFile.lengthSync();
      sizes.add(fileLocalSize);
      localText +=
          'localFile: "$basename$extension", fileLocalSize: ${filesize(fileLocalSize)}';

      int i = 1;
      localRouteToSaveFileStr = '$dir/$basename' '_$i$extension';
      File f = File(localRouteToSaveFileStr);
      while (f.existsSync()) {
        int tSize = f.lengthSync();
        sizes.add(tSize);
        localText += '\nchunk: "$basename'
            '_$i$extension", fileLocalSize: ${filesize(tSize)}';
        i++;
        localRouteToSaveFileStr = '$dir/$basename' '_$i$extension';
        f = File(localRouteToSaveFileStr);
      }

      sumSizes = sizes.fold(0, (p, c) => p + c);
      localText +=
          '\n\nsize: ${filesize(sumSizes)}/${filesize(fileOriginSize)}';
      localText += '\nbytes: $sumSizes/$fileOriginSize';
      localText += '\n${(sumSizes / fileOriginSize * 100).toStringAsFixed(2)}%';
      fullFile = sumSizes == fileOriginSize;
    }
    double percent = sumSizes / fileOriginSize;
    localNotifier.value = localText;
    progress.value = fullFile
        ? 1
        : percent == 0
            ? null
            : percent;
  }

  _cancel() {
    cancelToken.cancel();
    progress.value = null;
    checkIfFileExistsInLoacal(fileURL: fileURL, localFilePath: localFilePath);
  }

  _onReceiveProgress(int received, int total) {
    if (!cancelToken.isCancelled) {
      int sum = sizes.fold(0, (p, c) => p + c);
      received += sum;

      progress.value = received / total;
      debugPrint(
          'percentNotifier: ${(progress.value! * 100).toStringAsFixed(2)}');
    } else {
      debugPrint(
          'percentNotifier [AFTER CANCELED]: ${(progress.value! * 100).toStringAsFixed(2)}');
    }
  }

  _download() {
    localNotifier.value = null;
    progress.value = 0;
    fileURL = img.text;
    localFilePath = getLocalCacheFilesRoute(fileURL, dir!);

    getItemFileWithProgress(fileUrl: fileURL, localFilePath: localFilePath);
  }

  Future<File?> getItemFileWithProgress({
    required String fileUrl,
    required String localFilePath,
  }) async {
    debugPrint('getItemFileWithProgress()...');

    File localFile = File(localFilePath);
    String dir = path.dirname(localFilePath);
    String basename = path.basenameWithoutExtension(localFilePath);
    String extension = path.extension(localFilePath);

    String localRouteToSaveFileStr = localFilePath;
    sizes.clear();
    Response response = await dio.head(fileUrl);
    int fileOriginSize = int.parse(response.headers.value('content-length')!);
    Options? options;

    bool existsSync = localFile.existsSync();
    if (existsSync) {
      // Response response = await dio.head(fileUrl);
      // fileOriginSize = int.parse(response.headers.value('content-length')!);

      int fileLocalSize = localFile.lengthSync();
      sizes.add(fileLocalSize);

      int i = 1;
      localRouteToSaveFileStr = '$dir/$basename' '_$i$extension';
      File f = File(localRouteToSaveFileStr);
      while (f.existsSync()) {
        sizes.add(f.lengthSync());
        i++;
        localRouteToSaveFileStr = '$dir/$basename' '_$i$extension';
        f = File(localRouteToSaveFileStr);
      }

      int sumSizes = sizes.fold(0, (p, c) => p + c);
      if (sumSizes < fileOriginSize) {
        options = Options(
          headers: {'Range': 'bytes=$sumSizes-'},
        );
      } else {
        progress.value = 1;

        debugPrint(
            'percentNotifier [ALREADY DOWNLOADED]: ${(progress.value! * 100).toStringAsFixed(2)}');
        if (sizes.length == 1) {
          debugPrint('percentNotifier [ALREADY DOWNLOADED - ONE FILE]');
          checkIfFileExistsInLoacal(
              fileURL: fileUrl, localFilePath: localFilePath);
          return localFile;
        }
      }
    }

    if ((progress.value ?? 0) < 1) {
      if (cancelToken.isCancelled) {
        cancelToken = CancelToken();
      }

      try {
        await dio.download(fileUrl, localRouteToSaveFileStr,
            options: options,
            cancelToken: cancelToken,
            deleteOnError: false,
            onReceiveProgress: (int received, int total) =>
                _onReceiveProgress(received, fileOriginSize));
      } catch (e) {
        debugPrint('..dio.download()...ERROR: "${e.toString()}"');
        return null;
      }
    }

    if (existsSync) {
      debugPrint('[ALREADY DOWNLOADED - MERGING FILES]');
      var raf = await localFile.open(mode: FileMode.writeOnlyAppend);

      int i = 1;
      String filePartLocalRouteStr = '$dir/$basename' '_$i$extension';
      File f = File(filePartLocalRouteStr);
      while (f.existsSync()) {
        raf = await raf.writeFrom(await f.readAsBytes());
        await f.delete();

        i++;
        filePartLocalRouteStr = '$dir/$basename' '_$i$extension';
        f = File(filePartLocalRouteStr);
      }
      await raf.close();
    }

    checkIfFileExistsInLoacal(fileURL: fileUrl, localFilePath: localFilePath);
    return localFile;
  }
}
